{
  "diagnostic.refreshOnInsertMode": true,
  "diagnostic.checkCurrentLine": true,
  "diagnostic.warningSign": "--",
  "diagnostic.virtualText": true,
  "diagnostic.virtualTextPrefix": " â–  ",
  "diagnostic.virtualTextCurrentLineOnly": false,
  "coc.preferences.formatOnSaveFiletypes": ["elm", "typescript", "nix"],

  "prettier.tabWidth": 4,
  "prettier.trailingComma": "all",

  "languageserver": {

    "go": {
      "command": "gopls",
      "rootPatterns": ["go.mod"],
      "trace.server": "verbose",
      "filetypes": ["go"],
      "initializationOptions": {
        "experimentalWorkspaceModule": true
      }
    },

    "haskell": {
      "command": "haskell-language-server-wrapper",
      "args": ["--lsp"],
      "rootPatterns": ["*.cabal", "stack.yaml", "cabal.project", "package.yaml", "hie.yaml"],
      "filetypes": ["haskell", "lhaskell"]
    },

    "elmLS": {
      "command": "elm-language-server",
      "filetypes": ["elm"],
      "rootPatterns": ["elm.json"],
      "initializationOptions": {
        "elmAnalyseTrigger": "change"
      }
    },

    "nix": {
      "command": "rnix-lsp",
      "filetypes": ["nix"]
    }

  },

  // coc-diagnostics for shellcheck and shfmt
  // Install with :CocInstall coc-diagnostic
  "diagnostic-languageserver.filetypes": {
    // lint `sh` (includes `bash`) files
    "sh": "shellcheck"
  },
  "diagnostic-languageserver.formatFiletypes": {
    // format `sh` (includes `bash`) files using formatter defined below
    "sh": "shfmt"
  },
  "diagnostic-languageserver.formatters": {
      // define our formatter so that we can reference it from
      // `diagnostic-languageserver.formatFiletypes`
      "shfmt": {
          "command": "shfmt",
          // all the below args are entirely optional
          // primarily listed here to call out that flags which take an
          // argument (such as `-i <num-spaces>` for specifying indentation)
          // should be split into two strings, the flag and then the value
          "args": ["-i", "2", "-bn", "-ci", "-sr"]
      }
    }
}
